AWSTemplateFormatVersion: 2010-09-09
Description: ApiGateway to read/write data from S3

Parameters:
  S3BucketName:
    Description: Name of bucket to store files in
    Type: String
  ApiName:
    Type: String


Resources:
  DestS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref 'LoggingBucket'
        LogFilePrefix: s3-logs

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  S3IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      EndpointConfiguration:
        Types:
          - REGIONAL
      ApiKeySourceType: HEADER
      FailOnWarnings: True
      Body :

        swagger: "2.0"
        info:
          version: "2020-04-14T14:29:46Z"
          title: "S3-Gateway"
        basePath: "/Dev"
        schemes:
        - "https"
        paths:
          /:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                "500":
                  description: "500 response"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials:
                  !GetAtt
                    - S3IamRole
                    - Arn
                uri: "arn:aws:apigateway:eu-west-1:s3:path//"
                responses:
                  4\d{2}:
                    statusCode: "400"
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                  5\d{2}:
                    statusCode: "500"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
          /{folder}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials:
                  !GetAtt
                    - S3IamRole
                    - Arn
                uri: "arn:aws:apigateway:eu-west-1:s3:path/{bucket}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.x-amz-acl: "'authenticated-read'"
                  integration.request.path.bucket: "method.request.path.folder"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
            put:
              produces:
              - "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials:
                  !GetAtt
                    - S3IamRole
                    - Arn
                uri: "arn:aws:apigateway:eu-west-1:s3:path/{bucket}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.x-amz-acl: "'authenticated-read'"
                  integration.request.path.bucket: "method.request.path.folder"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                type: "aws"
          /{folder}/{item}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "item"
                in: "path"
                required: true
                type: "string"
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials:
                  !GetAtt
                    - S3IamRole
                    - Arn
                uri: "arn:aws:apigateway:eu-west-1:s3:path/{bucket}/{object}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.x-amz-acl: "'authenticated-read'"
                  integration.request.path.object: "method.request.path.item"
                  integration.request.path.bucket: "method.request.path.folder"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
            put:
              produces:
              - "text/plain"
              #- "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "item"
                in: "path"
                required: true
                type: "string"
              - name: "folder"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials:
                  !GetAtt
                    - S3IamRole
                    - Arn
                uri: "arn:aws:apigateway:eu-west-1:s3:path/{bucket}/{object}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.x-amz-acl: "'authenticated-read'"
                  integration.request.path.object: "method.request.path.item"
                  integration.request.path.bucket: "method.request.path.folder"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_match"
                httpMethod: "PUT"
                type: "aws"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"


  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyRestApi
      Description: My deployment
      StageName: Dev

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - MyRestApi
    Properties:
      Name: RestApiKey
      Description: CloudFormation API Key V1
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref MyRestApi
          StageName: Dev

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
      - ApiId: !Ref MyRestApi
        Stage: Dev
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan



Outputs:
  S3Bucket:
    Description: The target S3 bucket
    Value: !Ref DestS3Bucket
  LoggingBucket:
    Description: The S3 logging bucket
    Value: !Ref LoggingBucket
  RoleArn:
    Description: The IAM role created for API Gateway to have full access to S3
    Value: !GetAtt
      - S3IamRole
      - Arn
  ApiID:
    Description: API ID
    Value: !Ref MyRestApi
